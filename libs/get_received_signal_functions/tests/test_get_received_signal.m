% test_get_received_signal
% Unit tests for the `get_received_signal` function, which simulates a 
% baseband received signal incorporating ionospheric scintillation 
% effects, thermal noise, and LOS phase dynamics.
%
% This test class ensures that the function behaves correctly for valid 
% inputs and handles invalid cases gracefully by raising appropriate errors.
%
% Tests:
%   - Valid Input Tests:
%       * Ensure valid inputs for all scintillation models ('CSM', 'MFPSM', 
%         'none') produce expected outputs.
%       * Verify boundary conditions (e.g., minimal valid values).
%   - Invalid Input Tests:
%       * Validate error handling for all input parameters:
%           - `C_over_N0_dBHz`: Non-numeric, non-scalar.
%           - `S4`: Negative, greater than 1, non-numeric, non-scalar.
%           - `tau0`: Negative, non-numeric, non-scalar.
%           - `simulation_time`: Negative, zero, non-numeric, non-scalar.
%           - `settling_time`: Greater than `simulation_time`, negative, 
%             non-numeric, non-scalar.
%           - `scint_model`: Invalid string values.
%           - `is_refractive_effects_removed`: Invalid logical values.
%
% Example:
%   Run the test suite:
%       results = runtests('test_get_received_signal');
%       disp(results);

classdef test_get_received_signal < matlab.unittest.TestCase
    
    properties
        % Valid input parameters
        C_over_N0_dBHz = 45;         % Carrier-to-noise ratio in dB-Hz
        S4 = 0.8;                   % Scintillation index
        tau0 = 0.7;                 % Decorrelation time in seconds
        simulation_time = 300;      % Simulation time in seconds
        settling_time = 50;         % Settling time in seconds
        scint_model = 'CSM';        % Default scintillation model
        is_refractive_effects_removed = true; % Default value
    end

    methods (TestClassSetup)
        function addPaths(testCase)
            % Add paths for dependencies
            pathToAdd = fullfile(pwd, '..');
            if ~contains(path, pathToAdd)
                addpath(pathToAdd);
                testCase.addTeardown(@() rmpath(pathToAdd));
            end
            pathToAdd_2 = genpath(fullfile(pwd, '..', '..', 'scintillation_models'));
            if ~contains(path, pathToAdd_2)
                addpath(pathToAdd_2);
                testCase.addTeardown(@() rmpath(pathToAdd_2));
            end
        end
    end

    methods (Test)
        %% Valid Input Tests
        function test_valid_csm_model(testCase)
            % Valid inputs with scintillation model 'CSM'
            [received_signal, los_phase, psi, ps_realization] = get_received_signal( ...
                testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                testCase.simulation_time, testCase.settling_time, 'CSM');
            testCase.verifyNotEmpty(received_signal, 'Received signal is empty for CSM model.');
            testCase.verifyNotEmpty(los_phase, 'LOS phase is empty for CSM model.');
            testCase.verifyNotEmpty(psi, 'PSI is empty for CSM model.');
            testCase.verifyEmpty(ps_realization, 'PS realization should be empty for CSM model.');
        end

        function test_valid_mfpsm_model(testCase)
            % Valid inputs with scintillation model 'MFPSM'
            [received_signal, los_phase, psi, ps_realization] = get_received_signal( ...
                testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                testCase.simulation_time, testCase.settling_time, 'MFPSM', true);
            testCase.verifyNotEmpty(received_signal, 'Received signal is empty for MFPSM model.');
            testCase.verifyNotEmpty(los_phase, 'LOS phase is empty for MFPSM model.');
            testCase.verifyNotEmpty(psi, 'PSI is empty for MFPSM model.');
            testCase.verifyNotEmpty(ps_realization, 'PS realization is empty for MFPSM model.');
        end

        function test_valid_none_model(testCase)
            % Valid inputs with scintillation model 'none'
            [received_signal, los_phase, psi, ps_realization] = get_received_signal( ...
                testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                testCase.simulation_time, testCase.settling_time, 'none');


            % Calculate expected size of psi based on simulation time and T_I
            T_I = 0.01; % Fixed sampling interval
            expected_size = testCase.simulation_time / T_I;

            testCase.verifyNotEmpty(received_signal, 'Received signal is empty for none model.');
            testCase.verifyNotEmpty(los_phase, 'LOS phase is empty for none model.');
            testCase.verifyEqual(psi, ones(expected_size, 1), 'PSI is not a vector of ones for none model.');
            testCase.verifyEmpty(ps_realization, 'PS realization should be empty for none model.');
        end

        function test_valid_is_refractive_effect_removed_warning(testCase)
            % Boundary condition tests
            testCase.verifyWarning(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         'CSM', true), ...
                                 'get_received_signal:UnusedFlag');
        end

        %% Invalid Input Tests
        %%% C_over_N0_dBHz
        function test_invalid_C_over_N0_non_numeric(testCase)
            % Non-numeric input
            testCase.verifyError(@() get_received_signal('invalid', testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_C_over_N0_non_scalar(testCase)
            % Non-scalar input
            testCase.verifyError(@() get_received_signal([45, 50], testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end
        
        function test_invalid_C_over_N0_negative(testCase)
            % Negative value
            testCase.verifyError(@() get_received_signal(-5, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_C_over_N0_infinite(testCase)
            % Infinite value
            testCase.verifyError(@() get_received_signal(Inf, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
            testCase.verifyError(@() get_received_signal(-Inf, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_C_over_N0_nan(testCase)
            % NaN value
            testCase.verifyError(@() get_received_signal(NaN, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
        end
        
        function test_invalid_C_over_N0_empty(testCase)
            % Empty input
            testCase.verifyError(@() get_received_signal([], testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end

        %%% S4
        function test_invalid_S4_negative(testCase)
            % Negative value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, -0.1, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:notGreaterEqual');
        end
        
        function test_invalid_S4_greater_than_one(testCase)
            % Value greater than 1
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, 1.1, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:notLessEqual');
        end
        
        function test_invalid_S4_non_numeric(testCase)
            % Non-numeric input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, 'invalid', testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_S4_non_scalar(testCase)
            % Non-scalar input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, [0.8, 0.9], testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end
        
        function test_invalid_S4_nan(testCase)
            % NaN value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, NaN, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:notGreaterEqual');
        end
        
        function test_invalid_S4_infinite(testCase)
            % Infinite values
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, Inf, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:notLessEqual');
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, -Inf, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:notGreaterEqual');
        end
        
        function test_invalid_S4_empty(testCase)
            % Empty input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, [], testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end

        %%% tau0
        function test_invalid_tau0_non_numeric(testCase)
            % Non-numeric input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, 'invalid', ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_tau0_negative(testCase)
            % Negative value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, -0.5, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_tau0_non_scalar(testCase)
            % Non-scalar input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, [0.7, 0.8], ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end
        
        function test_invalid_tau0_nan(testCase)
            % NaN value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, NaN, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
        end
        
        function test_invalid_tau0_infinite(testCase)
            % Infinite values
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, Inf, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, -Inf, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_tau0_empty(testCase)
            % Empty input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, [], ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end

        %%% simulation_time
        function test_invalid_simulation_time_negative(testCase)
            % Negative value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         -10, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_simulation_time_zero(testCase)
            % Zero value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         0, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_simulation_time_non_numeric(testCase)
            % Non-numeric input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         'invalid', testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_simulation_time_non_scalar(testCase)
            % Non-scalar input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         [300, 400], testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end
        
        function test_invalid_simulation_time_nan(testCase)
            % NaN value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         NaN, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
        end
        
        function test_invalid_simulation_time_infinite(testCase)
            % Infinite values
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         Inf, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         -Inf, testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_simulation_time_empty(testCase)
            % Empty input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         [], testCase.settling_time, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end

        %%% settling_time
        function test_invalid_settling_time_negative(testCase)
            % Negative value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, -10, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_settling_time_greater_than_simulation_time(testCase)
            % settling_time exceeds simulation_time
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.simulation_time + 10, ...
                                                         testCase.scint_model), ...
                                 'get_received_signal:InvalidInput');
        end
        
        function test_invalid_settling_time_non_scalar(testCase)
            % Non-scalar input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, [10, 20], ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end
        
        function test_invalid_settling_time_non_numeric(testCase)
            % Non-numeric input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, 'invalid', ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_settling_time_nan(testCase)
            % NaN value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, NaN, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
        end
        
        function test_invalid_settling_time_infinite(testCase)
            % Infinite values
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, Inf, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedFinite');
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, -Inf, ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedPositive');
        end
        
        function test_invalid_settling_time_empty(testCase)
            % Empty input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, [], ...
                                                         testCase.scint_model), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end


        %%% scint_model
        function test_invalid_scint_model_unrecognized_value(testCase)
            % Invalid scint_model string
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         'invalid_model'), ...
                                 'get_received_signal:InvalidScintModel');
        end
        
        function test_invalid_scint_model_empty(testCase)
            % Empty scint_model
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         ''), ...
                                 'MATLAB:get_received_signal:expectedNonempty');
        end
        
        function test_invalid_scint_model_non_string(testCase)
            % Non-string input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         123), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_scint_model_wrong_case(testCase)
            % Case-sensitive scint_model
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         'csm'), ...
                                 'get_received_signal:InvalidScintModel');
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         'MfPsm'), ...
                                 'get_received_signal:InvalidScintModel');
        end
        
        %%% is_refractive_effects_removed
        function test_invalid_is_refractive_effects_removed_non_scalar(testCase)
            % Non-scalar input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model, [true, false]), ...
                                 'MATLAB:get_received_signal:expectedScalar');
        end
        
        function test_invalid_is_refractive_effects_removed_non_logical(testCase)
            % Non-logical input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model, 'invalid'), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_is_refractive_effects_removed_nan(testCase)
            % NaN value
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model, NaN), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_is_refractive_effects_removed_infinite(testCase)
            % Infinite values
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model, Inf), ...
                                 'MATLAB:get_received_signal:invalidType');
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model, -Inf), ...
                                 'MATLAB:get_received_signal:invalidType');
        end
        
        function test_invalid_is_refractive_effects_removed_empty(testCase)
            % Empty input
            testCase.verifyError(@() get_received_signal(testCase.C_over_N0_dBHz, testCase.S4, testCase.tau0, ...
                                                         testCase.simulation_time, testCase.settling_time, ...
                                                         testCase.scint_model, []), ...
                                 'MATLAB:get_received_signal:invalidType');
        end

    end
end
