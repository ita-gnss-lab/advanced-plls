classdef test_get_los_phase < matlab.unittest.TestCase

    properties
        % Test parameters (valid inputs)
        simulation_time = 300; % seconds
        sampling_interval = 0.01; % seconds
        los_phase_0 = 0; % radians
        fd = 1000; % Hz
        fdr = 0.94; % Hz/s

        % Invalid input cases, initialized in the TestClassSetup
        InvalidInputs
    end

    properties (TestParameter)
        % Parameterized property for input names
        inputName = struct(...
            'simulation_time', 'simulation_time', ...
            'sampling_interval', 'sampling_interval', ...
            'los_phase_0', 'los_phase_0', ...
            'fd', 'fd', ...
            'fdr', 'fdr' ...
        );
    end

    methods (TestClassSetup)
        function classSetup(testCase)
            % Add parent directory to path
            pathToAdd = fullfile(pwd, '..');
            if ~contains(path, pathToAdd)
                addpath(pathToAdd);
                testCase.addTeardown(@() rmpath(pathToAdd));
            end
    
            % Define invalid input cases as cell arrays to avoid dimension mismatch
            testCase.InvalidInputs = struct(...
                'simulation_time', { ...
                    { 'invalid', 'MATLAB:get_los_phase:invalidType'; ...
                      true, 'MATLAB:get_los_phase:invalidType'; ...
                      {300}, 'MATLAB:get_los_phase:invalidType'; ...
                      [300, 400], 'MATLAB:get_los_phase:expectedScalar'; ...
                      zeros(3, 3), 'MATLAB:get_los_phase:expectedScalar'; ...
                      -300, 'MATLAB:get_los_phase:expectedPositive'; ...
                      0, 'MATLAB:get_los_phase:expectedPositive'; ...
                      Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      -Inf, 'MATLAB:get_los_phase:expectedPositive'; ...
                      NaN, 'MATLAB:get_los_phase:expectedFinite'; ...
                      [], 'MATLAB:get_los_phase:expectedScalar'; ...
                      300 + 1j, 'MATLAB:get_los_phase:expectedReal' ...
                    } ...
                }, ...
                'sampling_interval', { ...
                    { 'invalid', 'MATLAB:get_los_phase:invalidType'; ...
                      true, 'MATLAB:get_los_phase:invalidType'; ...
                      {0.01}, 'MATLAB:get_los_phase:invalidType'; ...
                      [0.01, 0.02], 'MATLAB:get_los_phase:expectedScalar'; ...
                      zeros(3, 3), 'MATLAB:get_los_phase:expectedScalar'; ...
                      -0.01, 'MATLAB:get_los_phase:expectedPositive'; ...
                      0, 'MATLAB:get_los_phase:expectedPositive'; ...
                      Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      -Inf, 'MATLAB:get_los_phase:expectedPositive'; ...
                      NaN, 'MATLAB:get_los_phase:expectedFinite'; ...
                      [], 'MATLAB:get_los_phase:expectedScalar'; ...
                      0.01 + 1j, 'MATLAB:get_los_phase:expectedReal' ...
                    } ...
                }, ...
                'los_phase_0', { ...
                    { 'invalid', 'MATLAB:get_los_phase:invalidType'; ...
                      true, 'MATLAB:get_los_phase:invalidType'; ...
                      {0}, 'MATLAB:get_los_phase:invalidType'; ...
                      [0, 1], 'MATLAB:get_los_phase:expectedScalar'; ...
                      zeros(3, 3), 'MATLAB:get_los_phase:expectedScalar'; ...
                      Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      -Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      NaN, 'MATLAB:get_los_phase:expectedFinite'; ...
                      [], 'MATLAB:get_los_phase:expectedScalar' ...
                    } ...
                }, ...
                'fd', { ...
                    { 'invalid', 'MATLAB:get_los_phase:invalidType'; ...
                      true, 'MATLAB:get_los_phase:invalidType'; ...
                      {1000}, 'MATLAB:get_los_phase:invalidType'; ...
                      [1000, 2000], 'MATLAB:get_los_phase:expectedScalar'; ...
                      zeros(2, 2), 'MATLAB:get_los_phase:expectedScalar'; ...
                      Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      -Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      NaN, 'MATLAB:get_los_phase:expectedFinite'; ...
                      [], 'MATLAB:get_los_phase:expectedScalar' ...
                    } ...
                }, ...
                'fdr', { ...
                    { 'invalid', 'MATLAB:get_los_phase:invalidType'; ...
                      true, 'MATLAB:get_los_phase:invalidType'; ...
                      {0.94}, 'MATLAB:get_los_phase:invalidType'; ...
                      [0.94, 1.0], 'MATLAB:get_los_phase:expectedScalar'; ...
                      zeros(3, 3), 'MATLAB:get_los_phase:expectedScalar'; ...
                      Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      -Inf, 'MATLAB:get_los_phase:expectedFinite'; ...
                      NaN, 'MATLAB:get_los_phase:expectedFinite'; ...
                      [], 'MATLAB:get_los_phase:expectedScalar' ...
                    } ...
                } ...
            );
        end
    end

    methods (Test)
        %% Edge Case Scenarios

        %%% Test Case: simulation_time == sampling_interval
        function test_simulation_time_equals_sampling_interval(testCase)
            % simulation_time = sampling_interval; expect no warning
            test_simulation_time = 0.01;
            testCase.verifyWarningFree(@() get_los_phase(test_simulation_time, testCase.sampling_interval, testCase.los_phase_0, testCase.fd, testCase.fdr));
        end
        %%% Test Case: simulation_time < sampling_interval
        function test_simulation_time_smaller_than_sampling_interval(testCase)
            % simulation_time < sampling_interval; expect error
            test_simulation_time = 0.001; test_sampling_interval = 0.01;
            testCase.verifyError(@() get_los_phase(test_simulation_time,  testCase.sampling_interval, testCase.los_phase_0, testCase.fd, testCase.fdr), ...
                                 'get_los_phase:simulationTimeSmallerThanSamplingInterval');
        end
        %%% Test Case: simulation_time == 0
        function test_simulation_time_zero(testCase)
            % simulation_time = 0; expect error
            test_simulation_time = 0;
            testCase.verifyError(@() get_los_phase(test_simulation_time,  testCase.sampling_interval, testCase.los_phase_0, testCase.fd, testCase.fdr), ...
                                 'MATLAB:get_los_phase:expectedPositive');
        end
        %%% Test Case: sampling_interval == 0
        function test_sampling_interval_zero(testCase)
            % sampling_interval = 0; expect error
            test_sampling_interval = 0;
            testCase.verifyError(@() get_los_phase(testCase.simulation_time,  test_sampling_interval, testCase.los_phase_0, testCase.fd, testCase.fdr), ...
                                 'MATLAB:get_los_phase:expectedPositive');
        end
        %%% Test Case: simulation_time / sampling_interval non-integer
        function test_simulation_time_div_sampling_interval_non_integer(testCase)
            % simulation_time / sampling_interval is non-integer; expect a warning
            test_simulation_time = 0.011; test_sampling_interval = 0.01;
            testCase.verifyWarning(@() get_los_phase(test_simulation_time, test_sampling_interval, testCase.los_phase_0, testCase.fd, testCase.fdr), ...
                                   'get_los_phase:NonIntegerRatio');
        end
        %% Parameterized Validation Tests
        function test_invalid_inputs(testCase, inputName)
            %% Directly call the helper method with invalid cases
            testCase.run_validation_tests(inputName, testCase.InvalidInputs.(inputName));
        end
    end

    methods
        function run_validation_tests(testCase, inputName, invalidCases)
            % Iterate through invalid cases and verify errors
            for invalidCase = invalidCases.'
                % Extract invalid input and expected error
                invalidInput = invalidCase{1, 1};
                expectedError = invalidCase{2, 1};
            
                % Generate function inputs and convert invalid input to string for messages
                functionInputs = testCase.generate_inputs(inputName, invalidInput);
                invalidInputStr = testCase.safe_input_strings(invalidInput);
            
                % Run the validation test and check for expected error
                testCase.verifyError(@() get_los_phase(functionInputs{:}), expectedError, ...
                    sprintf('Validation failed for %s with input: %s', inputName, invalidInputStr));
            end
        end

        function inputs = generate_inputs(testCase, fieldName, value)
            % Create inputs for the get_los_phase function
            inputs = {...
                testCase.simulation_time, ...
                testCase.sampling_interval, ...
                testCase.los_phase_0, ...
                testCase.fd, ...
                testCase.fdr};
            inputs(strcmp(fieldName, {'simulation_time', 'sampling_interval', 'los_phase_0', 'fd', 'fdr'})) = {value};
        end

        function str = safe_input_strings(~, input)
            % Convert input to string safely for error messages
            if ischar(input) || isstring(input)
                str = char(input);
            elseif isnumeric(input) || islogical(input)
                str = mat2str(input);
            else
                str = '<unconvertible input>';
            end
        end
    end
end
