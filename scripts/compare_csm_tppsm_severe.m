clear all; clc;

addpath(genpath(fullfile(pwd,'..','libs')));

% Main seed for generating the received signal and the training data set.
% NOTE: It is sufficient to use a single rng() function in this top layer
% script, given that it propagates through all lower-level functions.
seed = 41;
rng(seed);
%% Generating the received signal for CSM and TPPSM under sever scintillatio scenarios
doppler_profile = [0,0,0];
L1_C_over_N0_dBHz = 45;
simulation_time = 300;
[rx_sig_csm, los_phase, psi_csm] = get_received_signal(L1_C_over_N0_dBHz, 'CSM', doppler_profile, ...
    'S4', 0.8, 'tau0', 0.7, 'simulation_time', simulation_time, 'settling_time', 50);
[rx_sig_tppsm, ~, psi_tppsm] = get_received_signal(L1_C_over_N0_dBHz, 'TPPSM', doppler_profile, ...
    'tppsm_scenario', 'Severe', 'simulation_time', simulation_time, 'settling_time', 50, 'is_refractive_effects_removed', true);

%% Generating KF-AR configurations and getting their estimates for CSM and TPPSM under severe scintillation scenarios
cache_dir = [fileparts(mfilename('fullpath')), '\cache'];

sampling_interval = 0.01; % 100 Hz
training_simulation_time = 900;
training_data_config_csm = struct('scintillation_model', 'CSM', 'S4', 0.8, 'tau0',0.7, 'simulation_time', training_simulation_time, 'sampling_interval', sampling_interval);
training_data_config_tppsm = struct('scintillation_model', 'TPPSM', 'scenario', 'Severe', 'simulation_time', training_simulation_time, 'is_refractive_effects_removed', true, 'sampling_interval', sampling_interval);
training_data_config_none = struct('scintillation_model', 'none', 'sampling_interval', sampling_interval);

process_noise_variance = 1e-6;
var_model_order = 5;
general_config_csm = struct( ...
  'discrete_wiener_model_config', { {1,3,0.01,[0,0,process_noise_variance],1} }, ...
  'scintillation_training_data_config', training_data_config_csm, ...
  'var_minimum_order', var_model_order, ...
  'var_maximum_order', var_model_order, ...
  'C_over_N0_array_dBHz', L1_C_over_N0_dBHz, ...
  'initial_states_distributions_boundaries',{ {[-pi,pi], [-5,5], [-0.1,0.1]} }, ...
  'real_doppler_profile', doppler_profile, ...
  'is_use_cached_settings', false, ...
  'is_generate_random_initial_estimates', true ...
);

general_config_tppsm = general_config_csm;
general_config_tppsm.scintillation_training_data_config = training_data_config_tppsm;

general_config_none = general_config_csm;
general_config_none.scintillation_training_data_config = training_data_config_none;

% Update the `CSM` settings in the cache file, if it is empty and get the initial estimates.
[~, init_estimates_csm]= get_kalman_pll_config(general_config_csm, cache_dir);
% Update the `TPPSM` settings in the cache file, if it is empty and get the initial estimates.
[~, init_estimates_tppsm] = get_kalman_pll_config(general_config_tppsm, cache_dir);
% Update the `none` settings in the cache file, if it is empty, generate
% the variable kf_cfg with the all scintillation modelsconfigs and obtain the initial estimates.
[kf_cfg, init_estimates_none] = get_kalman_pll_config(general_config_none, cache_dir);

[state_estimates_csm, ~] = get_kalman_pll_estimates(rx_sig_csm, kf_cfg, init_estimates_csm, 'CSM');
[state_estimates_none_under_csm, ~] = get_kalman_pll_estimates(rx_sig_csm, kf_cfg, init_estimates_none, 'none');

[state_estimates_tppsm, ~] = get_kalman_pll_estimates(rx_sig_tppsm, kf_cfg, init_estimates_tppsm, 'TPPSM');
[state_estimates_none_under_tppsm, ~] = get_kalman_pll_estimates(rx_sig_tppsm, kf_cfg, init_estimates_none, 'none');

time_vector = sampling_interval:sampling_interval:simulation_time;

plot_KFAR_estimates_comparison(...
    time_vector, ...
    los_phase, ...
    rx_sig_csm, ...
    state_estimates_csm, ...
    state_estimates_none_under_csm, ...
    rx_sig_tppsm, ...
    state_estimates_tppsm, ...
    state_estimates_none_under_tppsm, ...
    doppler_profile, ...
    L1_C_over_N0_dBHz, ...
    seed, ...
    process_noise_variance, ...
    var_model_order);