classdef test_build_kalman_pll_config < matlab.unittest.TestCase
    % test_build_kalman_pll_config
    %
    % This test suite verifies the behavior of the build_kalman_pll_config
    % function. It checks that valid inputs execute successfully and that
    % invalid inputs raise appropriate errors or warnings.

    properties
        default_kalman_pll_config
        default_scintillation_training_data_config
        default_var_minimum_order
        default_var_maximum_order
        default_c_over_n0_array_dBHz
        default_sampling_interval
        default_F_los
        default_Q_los
    end

    methods(TestClassSetup)
        function add_parent_path(test_case)
            % add_parent_path - Add the parent directory of the test folder 
            % so that preprocess_training_data.m and dependencies can be found.
            parent_dir = fileparts(fileparts(mfilename('fullpath')));
            libs_dir = fileparts(parent_dir);
            get_received_signal_functions_dir = [libs_dir,'\get_received_signal_functions'];
            tppsm_paths = genpath([libs_dir,'\scintillation_models\refactored_tppsm']);
            csm_paths = genpath([libs_dir,'\scintillation_models\cornell_scintillation_model']);
            arfit_path = [libs_dir,'\arfit'];
            addpath(parent_dir);
            addpath(get_received_signal_functions_dir);
            addpath(tppsm_paths);
            addpath(csm_paths);
            addpath(arfit_path);

            test_case.addTeardown(@() rmpath(parent_dir, get_received_signal_functions_dir, ...
                tppsm_paths, csm_paths, arfit_path));
        end
    end

    methods(TestMethodSetup)
        function setupDefaults(testCase)
            % Set up default valid inputs
            testCase.default_kalman_pll_config = struct();
            testCase.default_scintillation_training_data_config = struct( ...
                'S4', 0.8, ...
                'tau0', 0.7, ...
                'simulation_time', 100, ...
                'sampling_interval', 0.01, ...
                'scintillation_model', 'CSM' ...
            );
            testCase.default_var_minimum_order = 1;
            testCase.default_var_maximum_order = 2;
            testCase.default_c_over_n0_array_dBHz = 35;
            testCase.default_sampling_interval = 0.01;
            testCase.default_F_los = eye(3);
            testCase.default_Q_los = eye(3);
        end
    end

    methods(Test)
        function testValidInputs(testCase)
            % Verify that valid inputs execute without error
            kalman_pll_config = build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                testCase.default_var_minimum_order, ...
                testCase.default_var_maximum_order, ...
                testCase.default_c_over_n0_array_dBHz, ...
                testCase.default_sampling_interval, ...
                testCase.default_F_los, ...
                testCase.default_Q_los);
            
            % Check that the function adds a field named after the model
            testCase.verifyTrue(isfield(kalman_pll_config, ...
                testCase.default_scintillation_training_data_config.scintillation_model), ...
                'Expected the output struct to have a field for the model.');
        end

        function testVarOrderOutOfRange(testCase)
            % Verify error if var_minimum_order < 1
            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                0, ... % Invalid
                testCase.default_var_maximum_order, ...
                testCase.default_c_over_n0_array_dBHz, ...
                testCase.default_sampling_interval, ...
                testCase.default_F_los, ...
                testCase.default_Q_los), ...
                'MATLAB:build_kalman_pll_config:notGreaterEqual', ...
                'Expected an error for var_minimum_order < 1.');

            % Verify error if var_maximum_order < var_minimum_order
            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                2, ...
                1, ... % Invalid
                testCase.default_c_over_n0_array_dBHz, ...
                testCase.default_sampling_interval, ...
                testCase.default_F_los, ...
                testCase.default_Q_los), ...
                'MATLAB:build_kalman_pll_config:notGreaterEqual', ...
                'Expected an error for var_maximum_order < var_minimum_order.');
        end

        function testInvalidSamplingInterval(testCase)
            % Verify error if sampling_interval is non-positive
            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                testCase.default_var_minimum_order, ...
                testCase.default_var_maximum_order, ...
                testCase.default_c_over_n0_array_dBHz, ...
                0, ...          % Invalid
                testCase.default_F_los, ...
                testCase.default_Q_los), ...
                'MATLAB:build_kalman_pll_config:expectedPositive', ...
                'Expected an error for zero sampling_interval.');

            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                testCase.default_var_minimum_order, ...
                testCase.default_var_maximum_order, ...
                testCase.default_c_over_n0_array_dBHz, ...
                -0.01, ...      % Invalid
                testCase.default_F_los, ...
                testCase.default_Q_los), ...
                'MATLAB:build_kalman_pll_config:expectedPositive', ...
                'Expected an error for negative sampling_interval.');
        end

        function testInvalidCOverN0(testCase)
            % Verify error if C_over_N0_array_dBHz is non-positive
            cOverN0Invalid = -5;
            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                testCase.default_var_minimum_order, ...
                testCase.default_var_maximum_order, ...
                cOverN0Invalid, ...
                testCase.default_sampling_interval, ...
                testCase.default_F_los, ...
                testCase.default_Q_los), ...
                'MATLAB:build_kalman_pll_config:expectedPositive', ...
                'Expected an error for non-positive C/N0 values.');
        end

        function testInvalidMatrices(testCase)
            % Verify error if F_los or Q_los is not 2D numeric
            invalidF = {1, 2; 3, 'A'}; % includes a char
            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                testCase.default_var_minimum_order, ...
                testCase.default_var_maximum_order, ...
                testCase.default_c_over_n0_array_dBHz, ...
                testCase.default_sampling_interval, ...
                invalidF, ...
                testCase.default_Q_los), ...
                'MATLAB:build_kalman_pll_config:invalidType', ...
                'Expected an error for non-numeric F_los.');

            invalidQ = rand(2,2,2); % 3D array
            testCase.verifyError(@() build_kalman_pll_config( ...
                testCase.default_kalman_pll_config, ...
                testCase.default_scintillation_training_data_config, ...
                testCase.default_var_minimum_order, ...
                testCase.default_var_maximum_order, ...
                testCase.default_c_over_n0_array_dBHz, ...
                testCase.default_sampling_interval, ...
                testCase.default_F_los, ...
                invalidQ), ...
                'MATLAB:build_kalman_pll_config:expected2D', ...
                'Expected an error for non-2D Q_los.');
        end
    end
end
