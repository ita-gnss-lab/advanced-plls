% get_csm_optimum_var_order.m
%
% This script was used to identify the most common vector autoregressive 
% (VAR) model orders of scintillation amplitude and phase time series 
% generated by the Cornell scintillation model (CSM), based on the ARFIT
% algorithm [1].
%
% References:
% [1] Schneider, Tapio, and Arnold Neumaier. “Algorithm 808: ARfit—a Matlab 
% Package for the Estimation of Parameters and Eigenmodes of Multivariate
% Autoregressive Models.” ACM Trans. Math. Softw. 27, no. 1 
% (March 1, 2001): 58–65. https://doi.org/10.1145/382043.382316.
%
% Author: Rodrigo de Lima Florindo
% ORCID: https://orcid.org/0000-0003-0412-5583
% Email: rdlfresearch@gmail.com

clearvars; clc;

addpath(genpath(fullfile(pwd, '..', '..', '..', '..',  'libs')));

%% Simulate ionospheric scintillation time series using the CSM
simulation_time = 25;
sampling_interval = 0.01;
csm_params.Weak = struct('S4', 0.2, ...
    'tau0', 1, ...
    'simulation_time', simulation_time, ...
    'sampling_interval', sampling_interval);
csm_params.Moderate = struct('S4', 0.5, ...
    'tau0', 0.6, ...
    'simulation_time', simulation_time, ...
    'sampling_interval', sampling_interval);
csm_params.Strong = struct('S4', 0.9, ...
    'tau0', 0.2, ...
    'simulation_time', simulation_time, ...
    'sampling_interval', sampling_interval);

%% Monte Carlo optimum model order assessment

% Amount of Monte Carlo runs
mc_runs_amount = 1000;
% Maximum VAR model order
maximum_order = 10;
% Minimum VAR model order
minimum_order = 1;
% Preallocate a string array with the severities names
severities_string_array = ["Weak", "Moderate", "Strong"];
% Preallocate a array with the obtained optimal model orders for each
% scintillation severity.
optimal_orders_results_amp = zeros(mc_runs_amount, length(severities_string_array));
optimal_orders_results_phase = zeros(mc_runs_amount, length(severities_string_array));

seed = 1;
for mc_run = 1:mc_runs_amount
    for severity = severities_string_array
        % Modify the generation seed
        rng(seed);

        % Find the actual severity index
        severity_idx = find(severities_string_array == severity);

        % Obtain the synthetic scintillation time series generated using
        % the CSM.
        scint_time_series = get_csm_data(csm_params.(severity));
        
        amplitude_time_series = abs(scint_time_series);
        phase_time_series = atan2(imag(scint_time_series),real(scint_time_series));
        % Fit the VAR model in the generated scintillation time series 
        % amplitude and wrapped phase (within the bounds [-pi,pi] obtained 
        % using an atan2 function).
        % NOTE: The estimated optimal model order can be obtained from the
        % ratio between the amount of columns and rows of the coefficient 
        % matrix estimated by the ARFIT algorithm. That's because
        % its amount of rows corresponds to the amount of states and the
        % amount of columns represents the amount of states multiplied by
        % the estimated model order.
        % NOTE: In this specific case, the amount of states is 1, given
        % that CSM only simulates single-frequency scintillation
        % realizations.
        [~, A_amp, ~, ~, ~, ~] = arfit(amplitude_time_series, minimum_order, maximum_order);
        est_opt_mdl_order_amp = size(A_amp,2) / size(A_amp,1);
        [~, A_phase, ~, ~, ~, ~] = arfit(phase_time_series, minimum_order, maximum_order);
        est_opt_mdl_order_phase = size(A_phase,2) / size(A_phase,1);
        % Store the optimal order obtained for this Monte Carlo run
        optimal_orders_results_amp(mc_run, severity_idx) = est_opt_mdl_order_amp;
        optimal_orders_results_phase(mc_run, severity_idx) = est_opt_mdl_order_phase;
        seed = seed + 1;
    end
end

orders = minimum_order:maximum_order;
orders_amount = numel(orders);
severities_amount    = numel(severities_string_array);

% Preallocate count matrices
counts_amp   = zeros(orders_amount, severities_amount);
counts_phase = zeros(orders_amount, severities_amount);

% Compute histograms
for i = 1:severities_amount
    counts_amp(:,i)   = histcounts(optimal_orders_results_amp(:,i),   [orders, max(orders)+1]);
    counts_phase(:,i) = histcounts(optimal_orders_results_phase(:,i), [orders, max(orders)+1]);
end

% ---- Plot for Amplitude ----
figure;
bar(orders, counts_amp, 'grouped');
xlabel('VAR Model Order');
ylabel('Frequency');
title('Occurrence of Optimal VAR Orders (Amplitude)');
legend(severities_string_array, 'Location','best');
grid on;

% ---- Plot for Phase ----
figure;
bar(orders, counts_phase, 'grouped');
xlabel('VAR Model Order');
ylabel('Frequency');
title('Occurrence of Optimal VAR Orders (Phase)');
legend(severities_string_array, 'Location','best');
grid on;